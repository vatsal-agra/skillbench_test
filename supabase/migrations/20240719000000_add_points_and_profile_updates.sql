-- Add points and profile updates

-- Add points column to profiles table
ALTER TABLE public.profiles 
ADD COLUMN IF NOT EXISTS points bigint DEFAULT 0,
ADD COLUMN IF NOT EXISTS username text,
ADD COLUMN IF NOT EXISTS bio text,
ADD COLUMN IF NOT EXISTS avatar_url text;

-- Create user_achievements table
CREATE TABLE IF NOT EXISTS public.user_achievements (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  achievement_type text NOT NULL,
  points_earned bigint NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  metadata jsonb
);

-- Enable RLS for user_achievements
ALTER TABLE public.user_achievements ENABLE ROW LEVEL SECURITY;

-- Create policies for user_achievements
CREATE POLICY "Users can view their own achievements"
  ON public.user_achievements FOR SELECT
  USING (auth.uid() = user_id);

-- Create a function to award points
CREATE OR REPLACE FUNCTION public.award_points(
  user_id_param uuid,
  points_param bigint,
  achievement_type_param text DEFAULT NULL,
  metadata_param jsonb DEFAULT NULL
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Update user's total points
  UPDATE public.profiles 
  SET points = points + points_param
  WHERE id = user_id_param;
  
  -- Record the achievement if type is provided
  IF achievement_type_param IS NOT NULL THEN
    INSERT INTO public.user_achievements (user_id, achievement_type, points_earned, metadata)
    VALUES (user_id_param, achievement_type_param, points_param, metadata_param);
  END IF;
END;
$$;

-- Create a function to get leaderboard
CREATE OR REPLACE FUNCTION public.get_leaderboard(limit_count integer DEFAULT 10)
RETURNS TABLE (
  user_id uuid,
  name text,
  email text,
  points bigint,
  rank bigint
)
LANGUAGE sql
SECURITY DEFINER
AS $$
  WITH ranked_users AS (
    SELECT 
      id as user_id,
      COALESCE(name, split_part(email, '@', 1)) as name,
      email,
      points,
      RANK() OVER (ORDER BY points DESC) as rank
    FROM public.profiles
    WHERE points > 0
  )
  SELECT * FROM ranked_users
  ORDER BY points DESC
  LIMIT limit_count;
$$;

-- Function to get a single user's rank
CREATE OR REPLACE FUNCTION public.get_user_rank(user_id_param uuid)
RETURNS bigint
LANGUAGE sql
SECURITY DEFINER
AS $$
  WITH ranked_users AS (
    SELECT 
      id,
      RANK() OVER (ORDER BY points DESC) as rank
    FROM public.profiles
    WHERE points > 0
  )
  SELECT rank 
  FROM ranked_users 
  WHERE id = user_id_param;
$$;

-- Update handle_new_user function to include username
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.profiles (id, email, name, username)
  VALUES (
    new.id, 
    new.raw_user_meta_data->>'email',
    COALESCE(
      new.raw_user_meta_data->>'name',
      new.raw_user_meta_data->>'full_name',
      split_part(new.email, '@', 1)
    ),
    COALESCE(
      new.raw_user_meta_data->>'username',
      LOWER(regexp_replace(
        COALESCE(
          new.raw_user_meta_data->>'name',
          new.raw_user_meta_data->>'full_name',
          split_part(new.email, '@', 1)
        ),
        '[^a-zA-Z0-9]',
        '',
        'g'
      ))
  );
  RETURN new;
END;
$$;
